[versions]
jackson = "2.15.4"
kotlin = "2.1.10"
ktor = "3.0.0"
spring-boot = "3.2.10"
spring-cloud = "4.1.5"
testcontainers = "1.19.7"

[libraries]
flyway-core = { module = "org.flywaydb:flyway-core", version = "9.22.3" }
jackson-datatype-jsr = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
json-schema-validator = { module = "io.github.optimumcode:json-schema-validator", version = "0.2.3"}
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlin-test-junit = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin" }
kotlinx-serialization-json = "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor"}
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor"}
ktor-client-mock = { module = "io.ktor:ktor-client-mock", version.ref = "ktor"}
logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version = "8.0" }
micrometer-bridge-otel = { module = "io.micrometer:micrometer-tracing-bridge-otel"}
micrometer-registry-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version = "5.4.0" }
otel-exporter = { module = "io.opentelemetry:opentelemetry-exporter-otlp" }
postgres = { module = "org.postgresql:postgresql", version = "42.7.5" }
springFramework-context = { module = "org.springframework:spring-context"}
springFramework-aspects = { module = "org.springframework:spring-aspects" }
springBoot-devtools = { module = "org.springframework.boot:spring-boot-devtools" }
springBoot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
springBoot-starter-actuatorAutoconfigure = { module = "org.springframework.boot:spring-boot-actuator-autoconfigure" }
springBoot-starter-jdbc = { module = "org.springframework.boot:spring-boot-starter-data-jdbc", version.ref = "spring-boot"}
springBoot-starter-mustache = { module = "org.springframework.boot:spring-boot-starter-mustache", version.ref = "spring-boot" }
springBoot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }
springBoot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot" }
springBoot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
springCloud-starter-streamKafka = { module = "org.springframework.cloud:spring-cloud-starter-stream-kafka", version.ref = "spring-cloud"}
springCloud-stream = { module = "org.springframework.cloud:spring-cloud-stream", version.ref = "spring-cloud"}
springCloud-streamTestBinder = { module = "org.springframework.cloud:spring-cloud-stream-test-binder", version.ref = "spring-cloud"}
springData-commons = { module = "org.springframework.data:spring-data-commons", version.ref = "spring-boot" }
springDoc-openapi-starter = "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0"
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers"}
testcontainers-junit-jupiter = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers"}
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers"}

[bundles]
tracing = ["micrometer-bridge-otel", "otel-exporter"]

[plugins]
kotlin-kover = { id = "org.jetbrains.kotlinx.kover", version = "0.8.3" }
kotlin-jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependencyManagement = { id = "io.spring.dependency-management", version = "1.1.7"}
